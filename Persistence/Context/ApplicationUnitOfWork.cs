// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Reflection;
using System.Threading;
using Audit.EntityFramework;
using Microsoft.EntityFrameworkCore.Metadata;
using Persistence.Interfaces;
using Domain.Entities;
using Domain;
using Domain.Entities.reverse;
using Infrastructure.Interfaces;
using Configuration = Domain.Entities.Configuration;


namespace Persistence.Context
{
    public class ApplicationUnitOfWork : AuditDbContext , IApplicationUnitOfWork
    {
        public virtual DbSet<Advertisement> Advertisements { get; set; } = default!;
        public virtual DbSet<BaseValue> BaseValues { get; set; } = default!;
        public virtual DbSet<BaseValueType> BaseValueTypes { get; set; } = default!;
        public virtual DbSet<Branch> Branches { get; set; } = default!;
        public virtual DbSet<ContractProject> ContractProjects { get; set; }

        public virtual DbSet<Commission> Commissions { get; set; } = default!;
        public virtual DbSet<Communication> Communications { get; set; } = default!;
        public virtual DbSet<Contract> Contracts { get; set; } = default!;
        public virtual DbSet<ContractAttachment> ContractAttachments { get; set; } = default!;
        public virtual DbSet<CountryDivision> CountryDivisions { get; set; } = default!;
        public virtual DbSet<Customer> Customers { get; set; } = default!;
        public virtual DbSet<Employee> Employees { get; set; } = default!;
        public virtual DbSet<Census> Censuses { get; set; }

        public virtual DbSet<MenuItem> MenuItems { get; set; } = default!;
        public virtual DbSet<Operator> Operators { get; set; } = default!;
        public virtual DbSet<OutgoingAdvertismentMessage> OutgoingAdvertismentMessages { get; set; } = default!;
        public virtual DbSet<Permission> Permissions { get; set; } = default!;
        public virtual DbSet<Person> Persons { get; set; } = default!;
        public virtual DbSet<Position> Positions { get; set; } = default!;
        public virtual DbSet<Project> Projects { get; set; } = default!;
        public virtual DbSet<Question> Questions { get; set; } = default!;
        public virtual DbSet<Role> Roles { get; set; } = default!;
        public virtual DbSet<RolePermission> RolePermissions { get; set; } = default!;
        public virtual DbSet<SessionSurvey> SessionSurveys { get; set; } = default!;
        public virtual DbSet<Domain.Entities.Task> Tasks { get; set; } = default!;
        public virtual DbSet<Unit> Units { get; set; } = default!;
        public virtual DbSet<UnitPosition> UnitPositions { get; set; } = default!;
        public virtual DbSet<User> Users { get; set; } = default!;
        public virtual DbSet<UserRole> UserRoles { get; set; } = default!;
        public virtual DbSet<UserSetting> UserSettings { get; set; } = default!;
        public virtual DbSet<Case> Cases { get; set; }
        public virtual DbSet<CaseEmployeeChange> CaseEmployeeChanges { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }

        public new DbSet<TEntity> Set<TEntity>() where TEntity : class, IBaseEntity
        {
            return base.Set<TEntity>();
        }


        public DbContext Context()
        {
            return _appDbContext;
        }
        public new IModel Model()
        {
            return base.Model;
        }

        public async Task<int> SaveAsync(CancellationToken cancellationToken)
        {
            try
            {
                return await _appDbContext.SaveChangesAsync(cancellationToken);

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public int Save()
        {
            try
            {
                return  _appDbContext.SaveChanges();

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private readonly ApplicationUnitOfWork _appDbContext;

        public ApplicationUnitOfWork(DbContextOptions<ApplicationUnitOfWork> options)
            : base(options)
        {
            _appDbContext = this;
        }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
            modelBuilder.ApplyConfigurationsFromAssembly(AppDomain.CurrentDomain.GetAssemblies()
                .First(x => x.FullName.Contains("Domain")));

            foreach (var type in modelBuilder.Model.GetEntityTypes())
            {
                if (typeof(IBaseEntity).IsAssignableFrom(type.ClrType))
                    modelBuilder.SetSoftDeleteFilter(type.ClrType);
            }

            base.OnModelCreating(modelBuilder);
        }

    }

    public static class EFFilterExtensions
    {
        public static void SetSoftDeleteFilter(this ModelBuilder modelBuilder, Type entityType)
        {
            SetSoftDeleteFilterMethod.MakeGenericMethod(entityType)
                .Invoke(null, new object[] { modelBuilder });
        }

        static readonly MethodInfo SetSoftDeleteFilterMethod = typeof(EFFilterExtensions)
            .GetMethods(BindingFlags.Public | BindingFlags.Static)
            .Single(t => t.IsGenericMethod);

        public static void SetSoftDeleteFilter<TEntity>(this ModelBuilder modelBuilder)
            where TEntity : class, IBaseEntity
        {
            modelBuilder.Entity<TEntity>().HasQueryFilter(x => !x.IsDeleted);
        }
    }
}